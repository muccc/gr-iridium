/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(fft_burst_tagger.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(32ac758b638cc8bb7a467f7def339a85)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <iridium/fft_burst_tagger.h>
// pydoc.h is automatically generated in the build directory
#include <fft_burst_tagger_pydoc.h>

void bind_fft_burst_tagger(py::module& m)
{

    using fft_burst_tagger    = ::gr::iridium::fft_burst_tagger;


    py::class_<fft_burst_tagger, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<fft_burst_tagger>>(m, "fft_burst_tagger", D(fft_burst_tagger))

        .def(py::init(&fft_burst_tagger::make),
           py::arg("center_frequency"),
           py::arg("fft_size"),
           py::arg("sample_rate"),
           py::arg("burst_pre_len"),
           py::arg("burst_post_len"),
           py::arg("burst_width"),
           py::arg("max_bursts") = 0,
           py::arg("threshold") = 7,
           py::arg("history_size") = 512,
           py::arg("offline") = false,
           py::arg("debug") = false,
           D(fft_burst_tagger,make)
        )
        




        
        .def("get_n_tagged_bursts",&fft_burst_tagger::get_n_tagged_bursts,       
            D(fft_burst_tagger,get_n_tagged_bursts)
        )


        
        .def("get_sample_count",&fft_burst_tagger::get_sample_count,       
            D(fft_burst_tagger,get_sample_count)
        )

        ;




}








